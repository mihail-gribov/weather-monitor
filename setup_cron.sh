#!/bin/bash

# Automatic Cron Setup Script for Weather Monitor
# This script helps configure cron with proper environment detection

set -euo pipefail

echo "🌦️  Weather Monitor Cron Setup"
echo "================================"

# Detect current environment
CURRENT_DIR=$(pwd)
PYTHON_PATH=$(which python)
USER_HOME="$HOME"

echo "📍 Detected environment:"
echo "   Project directory: $CURRENT_DIR"
echo "   Python path: $PYTHON_PATH"
echo "   User home: $USER_HOME"
echo

# Check if we're in the right directory
if [ ! -f "weather_monitor.py" ]; then
    echo "❌ Error: weather_monitor.py not found in current directory"
    echo "   Please run this script from the weather-monitor project directory"
    exit 1
fi

# Create wrapper script from template
echo "🔧 Creating wrapper script..."

if [ -f "run_weather_monitor.sh" ]; then
    echo "⚠️  Wrapper script already exists. Creating backup..."
    cp run_weather_monitor.sh run_weather_monitor.sh.backup
fi

# Generate wrapper script with detected paths
cat > run_weather_monitor.sh << EOF
#!/bin/bash

# Weather Monitor Cron Wrapper Script
# Auto-generated by setup_cron.sh

set -euo pipefail

# Define paths (auto-detected)
PROJECT_DIR="$CURRENT_DIR"
PYTHON_PATH="$PYTHON_PATH"
LOG_DIR="\$PROJECT_DIR/logs"
LOG_FILE="\$LOG_DIR/weather_monitor_cron.log"

# Create log directory if it doesn't exist
mkdir -p "\$LOG_DIR" 2>/dev/null || true

# Function to log messages with timestamp
log_message() {
    echo "[\$(date '+%Y-%m-%d %H:%M:%S')] \$1" >> "\$LOG_FILE"
}

# Function to log errors
log_error() {
    echo "[\$(date '+%Y-%m-%d %H:%M:%S')] ERROR: \$1" >> "\$LOG_FILE"
}

# Start execution
log_message "Starting weather monitor cron job"

# Check if project directory exists
if [ ! -d "\$PROJECT_DIR" ]; then
    log_error "Project directory not found: \$PROJECT_DIR"
    exit 1
fi

# Change to project directory
cd "\$PROJECT_DIR" || {
    log_error "Failed to change to project directory: \$PROJECT_DIR"
    exit 1
}

# Check if Python interpreter exists
if [ ! -f "\$PYTHON_PATH" ]; then
    log_error "Python interpreter not found: \$PYTHON_PATH"
    exit 1
fi

# Check if main script exists
if [ ! -f "weather_monitor.py" ]; then
    log_error "Main script not found: weather_monitor.py"
    exit 1
fi

# Set environment variables
export PATH="$PATH"
export PYTHONPATH="\$PROJECT_DIR\${PYTHONPATH:+:\$PYTHONPATH}"
export HOME="$USER_HOME"

# Parse command line arguments (default to 6 hours)
HOURS=\${1:-6}
VERBOSE=\${2:-""}

# Build command
CMD="\$PYTHON_PATH weather_monitor.py fetch-weather --hours \$HOURS"
if [ "\$VERBOSE" = "--verbose" ]; then
    CMD="\$CMD --verbose"
fi

# Execute the weather monitor script
log_message "Executing: \$CMD"

if \$CMD >> "\$LOG_FILE" 2>&1; then
    log_message "Weather monitor completed successfully"
    exit 0
else
    EXIT_CODE=\$?
    log_error "Weather monitor failed with exit code: \$EXIT_CODE"
    exit \$EXIT_CODE
fi
EOF

chmod +x run_weather_monitor.sh
echo "✅ Wrapper script created: run_weather_monitor.sh"

# Test the wrapper script
echo
echo "🧪 Testing wrapper script..."
if ./run_weather_monitor.sh 1; then
    echo "✅ Wrapper script test successful!"
else
    echo "❌ Wrapper script test failed. Check the configuration."
    exit 1
fi

# Show cron configuration options
echo
echo "⏰ Cron Configuration Options"
echo "=============================="
echo
echo "Choose your preferred schedule:"
echo
echo "1) 🎯 OPTIMAL (recommended)"
echo "   Every 30 minutes with 6-hour data window"
echo "   */30 * * * * $CURRENT_DIR/run_weather_monitor.sh 6"
echo
echo "2) ⚡ HIGH FREQUENCY"
echo "   Every 15 minutes with 3-hour data window"
echo "   */15 * * * * $CURRENT_DIR/run_weather_monitor.sh 3"
echo
echo "3) 💾 LOW FREQUENCY"
echo "   Every hour with 12-hour data window"
echo "   0 * * * * $CURRENT_DIR/run_weather_monitor.sh 12"
echo

# Interactive cron setup
read -p "Would you like to automatically add a cron job? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo
    echo "Select schedule option (1-3): "
    read -n 1 -r OPTION
    echo
    
    case $OPTION in
        1)
            CRON_LINE="*/30 * * * * $CURRENT_DIR/run_weather_monitor.sh 6"
            ;;
        2)
            CRON_LINE="*/15 * * * * $CURRENT_DIR/run_weather_monitor.sh 3"
            ;;
        3)
            CRON_LINE="0 * * * * $CURRENT_DIR/run_weather_monitor.sh 12"
            ;;
        *)
            echo "Invalid option. Using default (option 1)."
            CRON_LINE="*/30 * * * * $CURRENT_DIR/run_weather_monitor.sh 6"
            ;;
    esac
    
    # Add to crontab
    (crontab -l 2>/dev/null; echo "$CRON_LINE") | crontab -
    echo "✅ Cron job added: $CRON_LINE"
    echo
    echo "📋 Current crontab:"
    crontab -l
else
    echo
    echo "📝 Manual setup instructions:"
    echo "   1. Run: crontab -e"
    echo "   2. Add one of the lines above"
    echo "   3. Save and exit"
fi

echo
echo "🎉 Setup complete!"
echo
echo "📊 Monitoring commands:"
echo "   Check logs: tail -f logs/weather_monitor_cron.log"
echo "   Test wrapper: ./run_weather_monitor.sh 1"
echo "   View crontab: crontab -l"
echo "   Check status: systemctl status cron"
echo
echo "📚 For detailed instructions, see: CRON_SETUP.md"
